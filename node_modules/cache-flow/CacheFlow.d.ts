import { CacheLoader } from './CacheLoader';
import { CacheFlowConfiguration, LoggerInterface, RedisCacheConfiguration } from './config/CacheFlowConfiguration';
export declare class CacheFlow {
    private static readonly instances;
    private static readonly nonCacheableInstances;
    private static configuration;
    static configure(configuration: CacheFlowConfiguration): void;
    static isRedisConfigured(): boolean;
    static getRedisConfiguration(): RedisCacheConfiguration;
    static getLogger(): LoggerInterface;
    static resetAll(): Promise<void>;
    static get(cacheId: string): CacheLoader<any, any>;
    static delete(cacheId: string, ...key: any[]): Promise<void>;
    static reset(cacheId: string): Promise<void>;
    static getInstances(): CacheLoader<any, any>[];
    static addInstance(cacheId: string, cache: CacheLoader<any, any>): void;
}
