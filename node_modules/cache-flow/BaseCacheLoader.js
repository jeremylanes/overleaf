"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseCacheLoader = void 0;
var date_fns_1 = require("date-fns");
var object_hash_1 = __importDefault(require("object-hash"));
var CacheFlow_1 = require("./CacheFlow");
var LRUCache_1 = require("./delegate/lru/LRUCache");
var RedisCache_1 = require("./delegate/redis/RedisCache");
var RedisClientProvider_1 = require("./redis/RedisClientProvider");
/**
 * Cache class allowing to create caches with automatic cache loading and delegates.
 */
var BaseCacheLoader = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {String} cacheId the identifier of the cache
     * @param {Object} cacheOptions the cache options:
     * * {Number} expirationTime: cache entries expiration time (seconds)
     * * {Number} maxSize: maximum number of cache entries
     */
    function BaseCacheLoader(cacheId, _a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.expirationTime, expirationTime = _c === void 0 ? 24 * 60 * 60 : _c, _d = _b.maxSize, maxSize = _d === void 0 ? 1000 : _d;
        this.cacheDefinition = {
            id: cacheId,
            options: {
                expirationTime: (0, date_fns_1.formatDistanceStrict)(0, expirationTime * 1000),
                maxSize: maxSize
            },
            metadata: {}
        };
        this.cacheOptions = { expirationTime: expirationTime, maxSize: maxSize };
        this.switchToLRUMode();
        if (CacheFlow_1.CacheFlow.isRedisConfigured()) {
            var redisClient = RedisClientProvider_1.redisClientProvider.getRedisClient();
            var self_1 = this;
            redisClient.on('ready', function () {
                CacheFlow_1.CacheFlow.getLogger().debug("Successfully (re)connected to Redis server, switching '".concat(cacheId, "' to Redis"));
                self_1.switchToRedisMode();
            });
            redisClient.on('error', function (error) {
                if (self_1.mode === 'REDIS') {
                    if (error.code === 'ECONNREFUSED') {
                        CacheFlow_1.CacheFlow.getLogger().error("Error connecting to Redis cache, falling back '".concat(cacheId, "' to in-memory LRU cache: "), error.message);
                        self_1.switchToLRUMode();
                    }
                    else if (error.code === 'ECONNRESET') {
                        CacheFlow_1.CacheFlow.getLogger().error("Error connecting to Redis: ", error.message);
                        self_1.switchToLRUMode();
                    }
                }
            });
            if (redisClient.status === 'ready') {
                CacheFlow_1.CacheFlow.getLogger().debug("Successfully connected to Redis server, '".concat(cacheId, "' is now using Redis"));
                this.switchToRedisMode();
            }
        }
    }
    /**
     * Gets a cached value.
     *
     * @param {K} key the cache key
     * @param {Boolean} force whether to force the cache refresh for that key (default: false)
     * @return {Promise<V>} the cached value
     */
    BaseCacheLoader.prototype.get = function (key, force) {
        if (force === void 0) { force = false; }
        return __awaiter(this, void 0, void 0, function () {
            var value, keyToString, cachedValue, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (key === undefined) {
                            return [2 /*return*/, undefined];
                        }
                        if (!!force) return [3 /*break*/, 4];
                        CacheFlow_1.CacheFlow.getLogger().debug("Getting value for key '".concat(this.keyToString(key), "' from cache '").concat(this.getCacheId(), "' (force=").concat(force, ")"));
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        keyToString = this.keyToString(key);
                        return [4 /*yield*/, this.delegate.get(keyToString)];
                    case 2:
                        cachedValue = _a.sent();
                        if (cachedValue !== undefined) {
                            value = this.deserialize(cachedValue);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        throw new Error("Failed to get value from cache '".concat(this.getCacheId(), "' for key '").concat(this.keyToString(key), "': ").concat(error_1.message));
                    case 4:
                        if (!!value) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.doLoadAndSet(key)];
                    case 5:
                        value = _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/, value];
                }
            });
        });
    };
    /**
     * @override
     *
     * Gets a cached value with additional metadata.
     *
     * @param {K} key the cache key
     * @param {Boolean} force whether to force the cache refresh for that key (default: false)
     * @return {Promise<Metadata<V>>} the cached value
     */
    BaseCacheLoader.prototype.getWithMetadata = function (key, force) {
        if (force === void 0) { force = false; }
        return __awaiter(this, void 0, void 0, function () {
            var value, cached, startTime, keyToString, cachedValue, error_2, time;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        startTime = new Date();
                        if (key === undefined) {
                            return [2 /*return*/, undefined];
                        }
                        if (!!force) return [3 /*break*/, 4];
                        CacheFlow_1.CacheFlow.getLogger().debug("Getting value for key '".concat(this.keyToString(key), "' from cache '").concat(this.getCacheId(), "' (force=").concat(force, ")"));
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        keyToString = this.keyToString(key);
                        return [4 /*yield*/, this.delegate.get(keyToString)];
                    case 2:
                        cachedValue = _a.sent();
                        if (cachedValue !== undefined) {
                            value = this.deserialize(cachedValue);
                            cached = true;
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _a.sent();
                        throw new Error("Failed to get value from cache '".concat(this.getCacheId(), "' for key '").concat(this.keyToString(key), "': ").concat(error_2.message));
                    case 4:
                        if (!!value) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.doLoadAndSet(key)];
                    case 5:
                        value = _a.sent();
                        cached = false;
                        _a.label = 6;
                    case 6:
                        time = (0, date_fns_1.differenceInMilliseconds)(new Date(), startTime);
                        return [2 /*return*/, { value: value, time: time, cached: cached }];
                }
            });
        });
    };
    BaseCacheLoader.prototype.set = function (key, value) {
        return __awaiter(this, void 0, void 0, function () {
            var keyToString, serializedValue;
            return __generator(this, function (_a) {
                if (key === undefined || value === undefined) {
                    CacheFlow_1.CacheFlow.getLogger().error("Tried to store undefined key or value in cache '".concat(this.getCacheId(), "': key=\"").concat(this.keyToString(key), "\", value=\"").concat(value, "\""));
                }
                else {
                    keyToString = this.keyToString(key);
                    try {
                        serializedValue = this.serialize(value);
                        return [2 /*return*/, this.delegate.set(keyToString, serializedValue)];
                    }
                    catch (error) {
                        throw new Error("Failed to set entry in cache '".concat(this.getCacheId(), "' for key '").concat(keyToString, "': ").concat(error.message));
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Checks if a cache entry exists for a given key.
     *
     * @param {String} key
     * @return {Boolean} true if the entry exists in the cache, false otherwise
     */
    BaseCacheLoader.prototype.exists = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var keyToString;
            return __generator(this, function (_a) {
                try {
                    keyToString = this.keyToString(key);
                    return [2 /*return*/, this.delegate.exists(keyToString)];
                }
                catch (error) {
                    throw new Error("Failed to check existence of entry in cache '".concat(this.getCacheId(), "' for key '").concat(this.keyToString(key), "': ").concat(error.message));
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Deletes a cache entry for a given key.
     *
     * @param {String} key
     */
    BaseCacheLoader.prototype.delete = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var keyToString, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        keyToString = this.keyToString(key);
                        CacheFlow_1.CacheFlow.getLogger().debug("Deleting key '".concat(keyToString, "' from cache '").concat(this.getCacheId(), "'"));
                        return [4 /*yield*/, this.delegate.delete(keyToString)];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        error_3 = _a.sent();
                        throw new Error("Failed to delete entry in cache '".concat(this.getCacheId(), "' for key '").concat(this.keyToString(key), "': ").concat(error_3.message));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deletes all entries in the cache;
     */
    BaseCacheLoader.prototype.reset = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        CacheFlow_1.CacheFlow.getLogger().debug("Clearing cache '".concat(this.getCacheId(), "'"));
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.delegate.reset()];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_4 = _a.sent();
                        throw new Error("Failed to reset cache '".concat(this.getCacheId(), "': ").concat(error_4.message));
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    BaseCacheLoader.prototype.getCacheId = function () {
        return this.cacheDefinition.id;
    };
    BaseCacheLoader.prototype.getCacheDefinition = function () {
        return this.cacheDefinition;
    };
    BaseCacheLoader.prototype.keyToString = function (key) {
        if (typeof key === 'string') {
            return key;
        }
        else if (typeof key === 'number') {
            return key.toString();
        }
        else {
            return (0, object_hash_1.default)(key);
        }
    };
    BaseCacheLoader.prototype.serialize = function (value) {
        var serializedValue;
        if (typeof value === 'object' || Array.isArray(value)) {
            serializedValue = { format: 'JSON', value: JSON.stringify(value) };
        }
        else {
            serializedValue = value;
        }
        return serializedValue;
    };
    BaseCacheLoader.prototype.deserialize = function (value) {
        var unserializedValue;
        if (value && value.format === 'JSON') {
            unserializedValue = JSON.parse(value.value);
        }
        else {
            unserializedValue = value;
        }
        return unserializedValue;
    };
    BaseCacheLoader.prototype.addMetadata = function (metadata) {
        this.cacheDefinition.metadata = __assign(__assign({}, this.cacheDefinition.metadata), metadata);
    };
    BaseCacheLoader.prototype.doLoadAndSet = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var value, error_5, error_6;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.load) return [3 /*break*/, 9];
                        CacheFlow_1.CacheFlow.getLogger().debug("Loading value for key '".concat(this.keyToString(key), "' into cache '").concat(this.getCacheId(), "'"));
                        value = void 0;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.load(key)];
                    case 2:
                        value = _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_5 = _a.sent();
                        CacheFlow_1.CacheFlow.getLogger().error("Failed to load value from cache '".concat(this.getCacheId(), "' for key '").concat(this.keyToString(key), "': ").concat(error_5.message));
                        throw error_5;
                    case 4:
                        if (!(key !== undefined && value !== undefined)) return [3 /*break*/, 8];
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.set(key, value)];
                    case 6:
                        _a.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        error_6 = _a.sent();
                        throw new Error("Failed to set value in cache '".concat(this.getCacheId(), "' for key '").concat(this.keyToString(key), "': ").concat(error_6.message));
                    case 8: return [2 /*return*/, value];
                    case 9: throw new Error("Cache '".concat(this.getCacheId(), "' must implement a load function"));
                }
            });
        });
    };
    BaseCacheLoader.prototype.switchToLRUMode = function () {
        if (this.mode !== 'LRU') {
            this.mode = 'LRU';
            this.delegate = new LRUCache_1.LRUCache(this.getCacheId(), this.cacheOptions);
        }
    };
    BaseCacheLoader.prototype.switchToRedisMode = function () {
        if (this.mode !== 'REDIS') {
            this.mode = 'REDIS';
            this.delegate = new RedisCache_1.RedisCache(this.getCacheId(), this.cacheOptions);
        }
    };
    return BaseCacheLoader;
}());
exports.BaseCacheLoader = BaseCacheLoader;
//# sourceMappingURL=BaseCacheLoader.js.map