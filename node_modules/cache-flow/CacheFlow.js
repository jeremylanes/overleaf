"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheFlow = void 0;
var lru_cache_for_clusters_as_promised_1 = __importDefault(require("lru-cache-for-clusters-as-promised"));
var CacheFlowConfiguration_1 = require("./config/CacheFlowConfiguration");
var cluster = require('cluster');
var CacheFlow = exports.CacheFlow = /** @class */ (function () {
    function CacheFlow() {
    }
    CacheFlow.configure = function (configuration) {
        if (cluster.isMaster) {
            lru_cache_for_clusters_as_promised_1.default.init();
        }
        this.configuration = __assign(__assign({}, this.configuration), configuration);
        if (!configuration.logger) {
            this.configuration.logger = new CacheFlowConfiguration_1.DefaultLogger();
        }
    };
    CacheFlow.isRedisConfigured = function () {
        var _a, _b, _c, _d;
        return !!((_b = (_a = this.configuration) === null || _a === void 0 ? void 0 : _a.redis) === null || _b === void 0 ? void 0 : _b.host) && !!((_d = (_c = this.configuration) === null || _c === void 0 ? void 0 : _c.redis) === null || _d === void 0 ? void 0 : _d.port);
    };
    CacheFlow.getRedisConfiguration = function () {
        return this.configuration.redis;
    };
    CacheFlow.getLogger = function () {
        return this.configuration.logger;
    };
    CacheFlow.resetAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _i, _a, cache;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _i = 0, _a = Array.from(this.instances.values());
                        _b.label = 1;
                    case 1:
                        if (!(_i < _a.length)) return [3 /*break*/, 4];
                        cache = _a[_i];
                        return [4 /*yield*/, cache.reset()];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _i++;
                        return [3 /*break*/, 1];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    CacheFlow.get = function (cacheId) {
        return this.nonCacheableInstances.get(cacheId);
    };
    CacheFlow.delete = function (cacheId) {
        var key = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            key[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var cache;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cache = this.instances.get(cacheId);
                        if (!cache) return [3 /*break*/, 4];
                        if (!cache.isCacheable) return [3 /*break*/, 2];
                        return [4 /*yield*/, cache.delete({ args: key })];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, cache.delete(key[0])];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    CacheFlow.reset = function (cacheId) {
        return __awaiter(this, void 0, void 0, function () {
            var cache;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cache = this.instances.get(cacheId);
                        if (!cache) return [3 /*break*/, 2];
                        return [4 /*yield*/, cache.reset()];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    CacheFlow.getInstances = function () {
        return Array.from(this.nonCacheableInstances.values());
    };
    CacheFlow.addInstance = function (cacheId, cache) {
        this.instances.set(cacheId, cache);
        if (!cache.isCacheable) {
            this.nonCacheableInstances.set(cacheId, cache);
        }
    };
    CacheFlow.instances = new Map();
    CacheFlow.nonCacheableInstances = new Map();
    CacheFlow.configuration = {
        logger: new CacheFlowConfiguration_1.DefaultLogger()
    };
    return CacheFlow;
}());
//# sourceMappingURL=CacheFlow.js.map