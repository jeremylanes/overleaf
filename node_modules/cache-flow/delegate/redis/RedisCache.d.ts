import { CacheOptions } from '../../BaseCacheLoader';
/**
 * Cache class allowing to manage a Redis cache.
 */
export declare class RedisCache {
    private readonly cacheId;
    private readonly maxAge;
    private readonly logger;
    private redisClient;
    /**
     * Constructor.
     *
     * @param {String} cacheId the identifier of the cache
     * @param maxAge
     */
    constructor(cacheId: string, { expirationTime }: CacheOptions);
    /**
     * Gets a cached value.
     *
     * @param {String} key the cache key
     * @return {Object} the cached value
     */
    get(key: any): Promise<any>;
    set(key: any, value: any): Promise<void>;
    /**
     * Checks if a cache entry exists for a given key.
     *
     * @param {any} key
     * @return {boolean} true if the entry exists in the cache, false otherwise
     */
    exists(key: any): Promise<boolean>;
    /**
     * Deletes a cache entry for a given key.
     *
     * @param {any} key
     */
    delete(key: any): Promise<void>;
    /**
     * Deletes all entries in the cache.
     */
    reset(): Promise<void>;
    private buildKey;
}
