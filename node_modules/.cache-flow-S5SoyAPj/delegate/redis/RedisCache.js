"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisCache = void 0;
var CacheFlow_1 = require("../../CacheFlow");
var RedisClientProvider_1 = require("../../redis/RedisClientProvider");
/**
 * Cache class allowing to manage a Redis cache.
 */
var RedisCache = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {String} cacheId the identifier of the cache
     * @param maxAge
     */
    function RedisCache(cacheId, _a) {
        var expirationTime = _a.expirationTime;
        this.cacheId = cacheId;
        this.maxAge = expirationTime;
        this.redisClient = RedisClientProvider_1.redisClientProvider.getRedisClient();
        this.logger = CacheFlow_1.CacheFlow.getLogger();
    }
    /**
     * Gets a cached value.
     *
     * @param {String} key the cache key
     * @return {Object} the cached value
     */
    RedisCache.prototype.get = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var fullKey, value, cachedValue, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(typeof key === 'string' || key instanceof String)) {
                            throw new Error("Key must be a string, got: ".concat(key));
                        }
                        fullKey = this.buildKey(key);
                        value = undefined;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 5]);
                        return [4 /*yield*/, this.redisClient.get(fullKey)];
                    case 2:
                        cachedValue = _a.sent();
                        if (cachedValue !== undefined) {
                            value = JSON.parse(cachedValue);
                        }
                        return [3 /*break*/, 5];
                    case 3:
                        error_1 = _a.sent();
                        this.logger.error("Failed to get value from Redis cache '".concat(this.cacheId, "' for key=\"").concat(fullKey, "\": ").concat(error_1));
                        return [4 /*yield*/, this.redisClient.del(fullKey)];
                    case 4:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/, value];
                }
            });
        });
    };
    RedisCache.prototype.set = function (key, value) {
        return __awaiter(this, void 0, void 0, function () {
            var fullKey, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(typeof key === 'string' || key instanceof String)) {
                            throw new Error("Key must be a string, got: ".concat(key));
                        }
                        fullKey = this.buildKey(key);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 6, , 7]);
                        if (!this.maxAge) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.redisClient.set(fullKey, JSON.stringify(value), 'EX', this.maxAge)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, this.redisClient.set(fullKey, JSON.stringify(value))];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5: return [3 /*break*/, 7];
                    case 6:
                        error_2 = _a.sent();
                        this.logger.error("Failed to set entry in Redis cache '".concat(this.cacheId, "' for key=\"").concat(fullKey, "\", value=\"").concat(value, "\": ").concat(error_2));
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Checks if a cache entry exists for a given key.
     *
     * @param {any} key
     * @return {boolean} true if the entry exists in the cache, false otherwise
     */
    RedisCache.prototype.exists = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var fullKey, exists, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(typeof key === 'string' || key instanceof String)) {
                            throw new Error("Key must be a string, got: ".concat(key));
                        }
                        fullKey = this.buildKey(key);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.redisClient.exists(fullKey)];
                    case 2:
                        exists = _a.sent();
                        return [2 /*return*/, exists === 1];
                    case 3:
                        error_3 = _a.sent();
                        this.logger.error("Failed to check existence of entry in Redis cache '".concat(this.cacheId, "' for key=\"").concat(fullKey, "\": ").concat(error_3));
                        return [2 /*return*/, false];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deletes a cache entry for a given key.
     *
     * @param {any} key
     */
    RedisCache.prototype.delete = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var fullKey, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(typeof key === 'string' || key instanceof String)) {
                            throw new Error("Key must be a string, got: ".concat(key));
                        }
                        fullKey = this.buildKey(key);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.redisClient.del(fullKey)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_4 = _a.sent();
                        this.logger.error("Failed to delete entry in Redis cache '".concat(this.cacheId, "' for key '").concat(fullKey, "': ").concat(error_4));
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deletes all entries in the cache.
     */
    RedisCache.prototype.reset = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cacheId, keyPattern, stream, self;
            return __generator(this, function (_a) {
                cacheId = this.cacheId;
                keyPattern = this.buildKey('*');
                stream = this.redisClient.scanStream({ match: keyPattern, count: 100 });
                self = this;
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        stream.on('data', function (matchingKeys) {
                            for (var _i = 0, matchingKeys_1 = matchingKeys; _i < matchingKeys_1.length; _i++) {
                                var matchingKey = matchingKeys_1[_i];
                                self.redisClient.del(matchingKey);
                            }
                        });
                        stream.on('end', function () {
                            resolve();
                            self.logger.info("Redis cache '".concat(cacheId, "' has been cleared"));
                        });
                        stream.on('error', function (error) {
                            reject("Error occurred while scanning keys in redis cache '".concat(cacheId, "': ").concat(error));
                        });
                    })];
            });
        });
    };
    RedisCache.prototype.buildKey = function (key) {
        if (!(typeof key === 'string')) {
            throw new Error("Key must be a String, got: ".concat(key));
        }
        return this.cacheId + '#!' + key;
    };
    return RedisCache;
}());
exports.RedisCache = RedisCache;
//# sourceMappingURL=RedisCache.js.map