"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LRUCacheWrapper = void 0;
var lru_cache_1 = require("lru-cache");
/**
 * Cache class allowing to bind an in-memory LRU Cache.
 */
var LRUCacheWrapper = /** @class */ (function () {
    /**
     * Constructor.
     *
     * @param {String} cacheId the identifier of the cache
     * @param {Object} cacheOptions the cache options:
     * * {Number} expirationTime: cache entries maximum age (seconds)
     * * {Number} maxSize: maximum number of cache entries
     */
    function LRUCacheWrapper(cacheId, _a) {
        var expirationTime = _a.expirationTime, _b = _a.maxSize, maxSize = _b === void 0 ? 1000 : _b;
        this.cacheId = cacheId;
        this.cache = new lru_cache_1.LRUCache({
            ttl: expirationTime * 1000,
            max: maxSize,
            allowStale: false,
        });
    }
    /**
     * Gets a cached value.
     *
     * @param {String} key the cache key
     * @return {Object} the cached value
     */
    LRUCacheWrapper.prototype.get = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (typeof key !== 'string') {
                    throw new Error("Key must be a string, got: ".concat(key));
                }
                try {
                    return [2 /*return*/, this.cache.get(key)];
                }
                catch (error) {
                    throw new Error("Failed to get value from LRU cache '".concat(this.cacheId, "' for key '").concat(key, "': ").concat(error.message));
                }
                return [2 /*return*/];
            });
        });
    };
    LRUCacheWrapper.prototype.set = function (key, value) {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof key !== 'string') {
                            throw new Error("Key must be a string, got: ".concat(key));
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.cache.set(key, value)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _a.sent();
                        throw new Error("Failed to set entry in LRU cache '".concat(this.cacheId, "' for key '").concat(key, "': ").concat(error_1.message));
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Checks if a cache entry exists for a given key.
     *
     * @param {String} key
     * @return {Boolean} true if the entry exists in the cache, false otherwise
     */
    LRUCacheWrapper.prototype.exists = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (typeof key !== 'string') {
                    throw new Error("Key must be a string, got: ".concat(key));
                }
                try {
                    return [2 /*return*/, this.cache.has(key)];
                }
                catch (error) {
                    throw new Error("Failed to check existence of entry in LRU cache '".concat(this.cacheId, "' for key '").concat(key, "': ").concat(error.message));
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Deletes a cache entry for a given key.
     *
     * @param {String} key
     */
    LRUCacheWrapper.prototype.delete = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof key !== 'string') {
                            throw new Error("Key must be a string, got: ".concat(key));
                        }
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.cache.delete(key)];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _a.sent();
                        throw new Error("Failed to delete entry in LRU cache '".concat(this.cacheId, "' for key '").concat(key, "': ").concat(error_2.message));
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Deletes all entries in the cache;
     */
    LRUCacheWrapper.prototype.reset = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.cache.clear()];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 3];
                    case 2:
                        error_3 = _a.sent();
                        throw new Error("Failed reset LRU cache '".concat(this.cacheId, "': ").concat(error_3.message));
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return LRUCacheWrapper;
}());
exports.LRUCacheWrapper = LRUCacheWrapper;
//# sourceMappingURL=LRUCacheWrapper.js.map