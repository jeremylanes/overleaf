import { CacheOptions } from '../../BaseCacheLoader';
/**
 * Cache class allowing to bind an in-memory LRU Cache.
 */
export declare class LRUCacheWrapper {
    private readonly cacheId;
    private cache;
    /**
     * Constructor.
     *
     * @param {String} cacheId the identifier of the cache
     * @param {Object} cacheOptions the cache options:
     * * {Number} expirationTime: cache entries maximum age (seconds)
     * * {Number} maxSize: maximum number of cache entries
     */
    constructor(cacheId: string, { expirationTime, maxSize }: CacheOptions);
    /**
     * Gets a cached value.
     *
     * @param {String} key the cache key
     * @return {Object} the cached value
     */
    get(key: string): Promise<any>;
    set(key: string, value: any): Promise<void>;
    /**
     * Checks if a cache entry exists for a given key.
     *
     * @param {String} key
     * @return {Boolean} true if the entry exists in the cache, false otherwise
     */
    exists(key: string): Promise<any>;
    /**
     * Deletes a cache entry for a given key.
     *
     * @param {String} key
     */
    delete(key: string): Promise<void>;
    /**
     * Deletes all entries in the cache;
     */
    reset(): Promise<void>;
}
